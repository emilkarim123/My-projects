#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>
#include <string>
#include <sstream>

using namespace std;

const int PADDLE_SPEED = 5;

int main(int argc, char* argv[])
{
    SDL_Init(SDL_INIT_VIDEO);

    if ( TTF_Init() < 0 ) {
	cout << "Error initializing SDL_ttf: " << TTF_GetError() << endl;
	}


    SDL_Window* window = SDL_CreateWindow("SDL2 Test", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, 0);

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);

    TTF_Font* font;
    int score = 0;
    stringstream ss;
    ss << score;
    string scoreStr = ss.str();

	font = TTF_OpenFont("./Roboto-Bold.ttf", 24);
	if ( !font ) {
		cout << "Failed to load font: " << TTF_GetError() << endl;
	}

	SDL_Surface* text;
	// Set color to black
	SDL_Color color = { 0, 0, 0 };
	
	text = TTF_RenderText_Solid( font, scoreStr.c_str(), color );
	if ( !text ) {
	cout << "Failed to render text: " << TTF_GetError() << endl;
	}

	 // Create a texture from the text surface
    SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, text);

    // Get the width and height of the text surface
    int textWidth = text->w;
    int textHeight = text->h;

    // Free the text surface as it's no longer needed
    SDL_FreeSurface(text);

    // Set the position and size of the text on the screen
    SDL_Rect textRect = { 10, 10, textWidth, textHeight };



    SDL_Rect leftpaddle;
    SDL_Rect rightpaddle;
    SDL_Rect ball;
    


    leftpaddle.x = 10;
	leftpaddle.y = 240;
	leftpaddle.w = 16;
	leftpaddle.h = 64;

	rightpaddle.x = 615;
	rightpaddle.y = 240;
	rightpaddle.w = 16;
	rightpaddle.h = 64;

	ball.x = 320;
	ball.y = 240;
	ball.w = 10;
	ball.h = 10;

	


    
    bool leftmoveup = true;
    bool rightmoveup = false;
    bool ballmoveleft = true;

    const int FPS = 60;
    const int frameDelay = 1000 / FPS;
    Uint32 frameStart;
    int frameTime;

    bool quit = false;
    while (!quit) {
 		frameStart = SDL_GetTicks();

        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
    
        }

        const Uint8* currentKeyStates = SDL_GetKeyboardState(NULL);
        if (currentKeyStates[SDL_SCANCODE_UP]) {

	        if(ball.y == 0){
	        	ball.y -= 0;
	        }	
	        else ball.y -= PADDLE_SPEED;
            
        }
        if (currentKeyStates[SDL_SCANCODE_DOWN]) {
             if(ball.y >= 480 - ball.h){
	        	ball.y += 0;
	        }	
	        else ball.y += PADDLE_SPEED;
        }



        if(ballmoveleft){
        	if(ball.x == 0){
        		ballmoveleft = false;
        	}else ball.x -= PADDLE_SPEED;
        	
        } 
        if(!ballmoveleft){
        	if(ball.x >= 640 - ball.w){
        		ballmoveleft = true;
        	}else ball.x += PADDLE_SPEED;
        	
        } 
        SDL_Rect res;
        if(SDL_IntersectRect(&leftpaddle, &ball, &res)){
        		ballmoveleft =false;
        		score++;
        		ss.str(""); // Clear the stringstream
       			 ss.clear();
			    ss << score;
			    scoreStr = ss.str();
			    text = TTF_RenderText_Solid( font, scoreStr.c_str(), color );
			    textTexture = SDL_CreateTextureFromSurface(renderer, text);
        }

          if(SDL_IntersectRect(&rightpaddle, &ball, &res)){
        		ballmoveleft =true;
        		score++;
        		ss.str(""); // Clear the stringstream
        		ss.clear();
			    ss << score;
			    scoreStr = ss.str();
			    text = TTF_RenderText_Solid( font, scoreStr.c_str(), color );
			    textTexture = SDL_CreateTextureFromSurface(renderer, text);
        }



        //Move paddle automatically
        if(leftmoveup){
        	
	        if(leftpaddle.y == 0){
	        	leftmoveup = false;
	        }	
	        else leftpaddle.y -= PADDLE_SPEED;
	    }
        if(!leftmoveup){
        	if(leftpaddle.y >= 480 - leftpaddle.h){
        		leftmoveup = true;
        	}
        	else leftpaddle.y += PADDLE_SPEED;
        }
        if(rightmoveup){
        	
	        if(rightpaddle.y == 0){
	        	rightmoveup = false;
	        }	
	        else rightpaddle.y -= PADDLE_SPEED;
	    }
        if(!rightmoveup){
        	if(rightpaddle.y >= 480 - rightpaddle.h){
        		rightmoveup = true;
        	}
        	else rightpaddle.y += PADDLE_SPEED;
        }


    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);

    SDL_RenderClear(renderer);

    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);

    SDL_RenderFillRect(renderer, &leftpaddle);
    SDL_RenderFillRect(renderer, &rightpaddle);
    SDL_RenderFillRect(renderer, &ball);
    SDL_RenderCopy(renderer, textTexture, NULL, &textRect);
    SDL_RenderPresent(renderer);

    frameTime = SDL_GetTicks() - frameStart;
        if (frameDelay > frameTime) {
            SDL_Delay(frameDelay - frameTime);
        }


    }
    SDL_DestroyTexture(textTexture);

    SDL_DestroyWindow(window);

    SDL_Quit();

    return 0;
}
